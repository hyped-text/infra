version: "3.7"

networks:
  ingres:

volumes:
  rdf_storage:
  dgraph:

services:
  traefik:
    image: traefik:1.7
    command: --web --docker
    container_name: traefik
    ports:
      # access this with the correct Host header to access the respective container
      - "80:80"
    volumes:
      # traefik does its magic by reading information about running containers from the docker socket
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ingres
    command: --api --docker
    labels:
      traefik.enable: "true"
      traefik.network: "ingres"
      traefik.frontend.rule: "Host:traefik.localhost"
      traefik.port: 8080

  imports:
    image: katalogoc/imports:latest
    env_file: .env
    container_name: imports
    command: npm run start:dev
    ports:
      - 8083:8083
    depends_on:
      - rabbit
    volumes:
      - $PWD/modules/imports:/app
      - rdf_storage:/root/.gutenberg
    networks:
      - ingres
    expose:
      - 8083
    labels:
      traefik.enable: "true"
      traefik.network: "ingres"
      traefik.frontend.rule: "Host:imports.localhost"
      traefik.port: 8083
  
  meta:
    image: katalogoc/meta:latest
    env_file: .env
    container_name: meta
    ports:
      - 8082:8082
    volumes:
      - $PWD/modules/meta:/app
    networks:
      - ingres
    expose:
      - 8082
    labels:
      traefik.enable: "true"
      traefik.network: "ingres"
      traefik.frontend.rule: "Host:meta.localhost"
      traefik.port: 8082

  rabbit:
    image: rabbitmq
    env_file: .env
    container_name: rabbit
    networks:
      - ingres
    ports:
      - 15672:15672
    expose:
      - 5672
      - 15672
    labels:
      traefik.enable: "true"
      traefik.network: "ingres"
      traefik.frontend.rule: "Host:rabbit.localhost"
      traefik.port: 8080

  zero:
    image: dgraph/dgraph:latest
    container_name: zero
    volumes:
      - type: volume
        source: dgraph
        target: /dgraph
        volume:
          nocopy: true
    expose:
      - 5080
      - 6080
    restart: on-failure
    command: dgraph zero --my=zero:5080
    networks:
      - ingres

  server:
    image: dgraph/dgraph:latest
    container_name: server
    volumes:
      - type: volume
        source: dgraph
        target: /dgraph
        volume:
          nocopy: true
    ports:
      - 8080:8080
      - 9080:9080
    restart: on-failure
    command: dgraph alpha --my=server:7080 --lru_mb=2048 --zero=zero:5080
    networks:
      - ingres

  ratel:
    depends_on:
      - server
    image: dgraph/dgraph:latest
    container_name: ratel
    volumes:
      - type: volume
        source: dgraph
        target: /dgraph
        volume:
          nocopy: true
    ports:
      - 8000:8000
    command: dgraph-ratel
    networks:
      - ingres
